#include <stdio.h>
#include <string.h>

#define MAX 100

char target[] = "the quick brown fox jumps over the lazy dog";

int build_mapping(char *cipher, char *map) {
int enc[256] = {0}, dec[256] = {0};
if (strlen(cipher) != strlen(target)) return 0;

for (int i = 0; cipher[i]; i++) {
char c1 = cipher[i], c2 = target[i];
if (c1 == ' ' && c2 == ' ') continue;
if (map[c1]) {
if (map[c1] != c2) return 0;
} else {
if (dec[c2]) return 0;
map[c1] = c2;
dec[c2] = 1;
}
}
return 1;
}

void decrypt(char *line, char *map) {
for (int i = 0; line[i]; i++) {
if (line[i] == ' ') putchar(' ');
else if (map[line[i]]) putchar(map[line[i]]);
else putchar('*');
}
putchar('\n');
}

int main() {
int t;
char line[100], lines[MAX][100];
scanf("%d\n", &t);
fgets(line, sizeof(line), stdin);

while (t--) {
int n = 0;
while (fgets(lines[n], sizeof(lines[n]), stdin)) {
if (strcmp(lines[n], "\n") == 0) break;
lines[n][strcspn(lines[n], "\n")] = '\0';
n++;
}

int found = 0;
char map[256] = {0};
for (int i = 0; i < n; i++) {
char temp[256] = {0};
if (build_mapping(lines[i], temp)) {
memcpy(map, temp, sizeof(temp));
found = 1;
break;
}
}

if (!found) {
puts("No solution.");
} else {
for (int i = 0; i < n; i++) decrypt(lines[i], map);
}

if (t) puts("");
}

return 0;
}





xuo jxuhu ykbmd veh nszai sgvt xuo rcpl wme


for python 
from collections import defaultdict
 
def get_pattern(word):
    map_char = {}
    pattern = ''
    next_char = 'a'
    for c in word:
        if c not in map_char:
            map_char[c] = next_char
            next_char = chr(ord(next_char) + 1)
        pattern += map_char[c]
    return pattern
 
def decrypt(enc, pat_dict):
    words = enc.split()
    candidates = []
 
    for w in words:
        pat = get_pattern(w)
        if pat in pat_dict:
            candidates.append(pat_dict[pat])
        else:
            return '*' * len(enc)
 
    map_char, rev_map = {}, {}
    if backtrack(words, candidates, 0, map_char, rev_map):
        return ''.join(map_char.get(c, ' ') if c != ' ' else ' ' for c in enc)
    return '*' * len(enc)
 
def backtrack(words, candidates, idx, map_char, rev_map):
    if idx == len(words):
        return True
 
    word = words[idx]
    for cand in candidates[idx]:
        temp_map = dict(map_char)
        temp_rev = dict(rev_map)
        valid = True
        for ec, dc in zip(word, cand):
            if (ec in temp_map and temp_map[ec] != dc) or (dc in temp_rev and temp_rev[dc] != ec):
                valid = False
                break
            temp_map[ec] = dc
            temp_rev[dc] = ec
        if valid and backtrack(words, candidates, idx + 1, temp_map, temp_rev):
            map_char.clear()
            map_char.update(temp_map)
            return True
    return False
 
def main():
    n = int(input())
    dict_words = [input().strip() for _ in range(n)]
    pat_dict = defaultdict(list)
    for word in dict_words:
        pat_dict[get_pattern(word)].append(word)
 
    try:
        while True:
            line = input()
            if line.strip():
                print(decrypt(line.strip(), pat_dict))
    except EOFError:
        pass
 
if __name__ == "__main__":
    main()
 

6
and
dick
jane
puff
spot
yertle
bjvg xsb hxsn xsb qymm xsb rqat xsb pnetfn
xxxx yyy zzzz www yyyy aaa bbbb ccc dddddd

