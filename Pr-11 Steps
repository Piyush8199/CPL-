#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ROW 1000
#define MAX_COL 1000

// We represent large numbers using strings
#define LIMIT "1000000000000000000000000000000000000000000000000000000000000"  // 10^60

// Function to compare two big integer strings
int is_greater_or_equal(const char *a, const char *b) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    if (len_a != len_b)
        return len_a > len_b;
    return strcmp(a, b) >= 0;
}

// Function to add two big integers as strings
void big_add(char *res, const char *a, const char *b) {
    char temp[MAX_COL] = {0};
    int len_a = strlen(a), len_b = strlen(b);
    int i = len_a - 1, j = len_b - 1, k = 0, carry = 0;

    while (i >= 0 || j >= 0 || carry) {
        int digit_a = (i >= 0) ? a[i--] - '0' : 0;
        int digit_b = (j >= 0) ? b[j--] - '0' : 0;
        int sum = digit_a + digit_b + carry;
        temp[k++] = (sum % 10) + '0';
        carry = sum / 10;
    }

    // Reverse result to get the final sum
    for (int m = 0; m < k; ++m)
        res[m] = temp[k - 1 - m];
    res[k] = '\0';
}

int main() {
    // Pascal's triangle rows
    char *prev_row[MAX_ROW];
    char *curr_row[MAX_ROW];
    int row_num = 0;

    // Initialize first row
    prev_row[0] = strdup("1");

    while (1) {
        // Print current row
        for (int i = 0; i <= row_num; ++i) {
            printf("%s", prev_row[i]);
            if (i != row_num) printf(" ");
        }
        printf("\n");

        // Generate next row
        curr_row[0] = strdup("1");
        int should_stop = 0;

        for (int i = 1; i < row_num + 1; ++i) {
            char *sum = (char *)malloc(MAX_COL);
            big_add(sum, prev_row[i - 1], prev_row[i]);
            if (is_greater_or_equal(sum, LIMIT)) {
                // Print last row before breaking
                free(sum);
                should_stop = 1;
                break;
            }
            curr_row[i] = sum;
        }

        if (should_stop) break;

        curr_row[row_num + 1] = strdup("1");

        // Free old row
        for (int i = 0; i <= row_num; ++i) {
            free(prev_row[i]);
        }

        // Copy curr_row to prev_row
        for (int i = 0; i <= row_num + 1; ++i) {
            prev_row[i] = curr_row[i];
        }

        row_num++;
    }

    return 0;
}


1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
...







Great! You're describing a variant of the step-size problem commonly seen in algorithm competitions — similar to the "Fly Me to the Alpha Centauri" problem, but with an extra rule:

✅ Problem Summary
You must step from x to y, using the fewest number of steps with these rules:

Each step is of nonnegative integer length.

Each step can be:

Same as the previous

+1 more than the previous

−1 less than the previous

The first and last step must be exactly 1.

You must land exactly on y.

Your task: Find the minimum number of steps to go from x to y with the above rules.



#include <stdio.h>
#include <math.h>

int compute_steps(int x, int y) {
    int d = y - x;

    if (d == 0) return 0;

    int k = (int)sqrt(d);
    if (d == k * k)
        return 2 * k - 1;
    else if (d <= k * k + k)
        return 2 * k;
    else
        return 2 * k + 1;
}

int main() {
    int n;
    scanf("%d", &n);  // Number of test cases

    for (int i = 0; i < n; ++i) {
        int x, y;
        scanf("%d %d", &x, &y);
        int steps = compute_steps(x, y);
        printf("%d\n", steps);
    }

    return 0;
}


3
45 48
45 49
45 50

